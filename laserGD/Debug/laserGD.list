
laserGD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080019cc  080019cc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080019cc  080019cc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080019cc  080019cc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019cc  080019cc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019cc  080019cc  000119cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019d0  080019d0  000119d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080019d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000004  080019d8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080019d8  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004683  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010df  00000000  00000000  000246b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000578  00000000  00000000  00025790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004e0  00000000  00000000  00025d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001211c  00000000  00000000  000261e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003ca2  00000000  00000000  00038304  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005e45c  00000000  00000000  0003bfa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009a402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001564  00000000  00000000  0009a480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080019b4 	.word	0x080019b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080019b4 	.word	0x080019b4

0800014c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <__NVIC_GetPriorityGrouping+0x18>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	0a1b      	lsrs	r3, r3, #8
 8000156:	f003 0307 	and.w	r3, r3, #7
}
 800015a:	4618      	mov	r0, r3
 800015c:	46bd      	mov	sp, r7
 800015e:	bc80      	pop	{r7}
 8000160:	4770      	bx	lr
 8000162:	bf00      	nop
 8000164:	e000ed00 	.word	0xe000ed00

08000168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000168:	b480      	push	{r7}
 800016a:	b083      	sub	sp, #12
 800016c:	af00      	add	r7, sp, #0
 800016e:	4603      	mov	r3, r0
 8000170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000176:	2b00      	cmp	r3, #0
 8000178:	db0b      	blt.n	8000192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	f003 021f 	and.w	r2, r3, #31
 8000180:	4906      	ldr	r1, [pc, #24]	; (800019c <__NVIC_EnableIRQ+0x34>)
 8000182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000186:	095b      	lsrs	r3, r3, #5
 8000188:	2001      	movs	r0, #1
 800018a:	fa00 f202 	lsl.w	r2, r0, r2
 800018e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000e100 	.word	0xe000e100

080001a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	4603      	mov	r3, r0
 80001a8:	6039      	str	r1, [r7, #0]
 80001aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	db0a      	blt.n	80001ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001b4:	683b      	ldr	r3, [r7, #0]
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	490c      	ldr	r1, [pc, #48]	; (80001ec <__NVIC_SetPriority+0x4c>)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	0112      	lsls	r2, r2, #4
 80001c0:	b2d2      	uxtb	r2, r2
 80001c2:	440b      	add	r3, r1
 80001c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001c8:	e00a      	b.n	80001e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	b2da      	uxtb	r2, r3
 80001ce:	4908      	ldr	r1, [pc, #32]	; (80001f0 <__NVIC_SetPriority+0x50>)
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	f003 030f 	and.w	r3, r3, #15
 80001d6:	3b04      	subs	r3, #4
 80001d8:	0112      	lsls	r2, r2, #4
 80001da:	b2d2      	uxtb	r2, r2
 80001dc:	440b      	add	r3, r1
 80001de:	761a      	strb	r2, [r3, #24]
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000e100 	.word	0xe000e100
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b089      	sub	sp, #36	; 0x24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	f003 0307 	and.w	r3, r3, #7
 8000206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000208:	69fb      	ldr	r3, [r7, #28]
 800020a:	f1c3 0307 	rsb	r3, r3, #7
 800020e:	2b04      	cmp	r3, #4
 8000210:	bf28      	it	cs
 8000212:	2304      	movcs	r3, #4
 8000214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	69fb      	ldr	r3, [r7, #28]
 8000218:	3304      	adds	r3, #4
 800021a:	2b06      	cmp	r3, #6
 800021c:	d902      	bls.n	8000224 <NVIC_EncodePriority+0x30>
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	3b03      	subs	r3, #3
 8000222:	e000      	b.n	8000226 <NVIC_EncodePriority+0x32>
 8000224:	2300      	movs	r3, #0
 8000226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	f04f 32ff 	mov.w	r2, #4294967295
 800022c:	69bb      	ldr	r3, [r7, #24]
 800022e:	fa02 f303 	lsl.w	r3, r2, r3
 8000232:	43da      	mvns	r2, r3
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	401a      	ands	r2, r3
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800023c:	f04f 31ff 	mov.w	r1, #4294967295
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	fa01 f303 	lsl.w	r3, r1, r3
 8000246:	43d9      	mvns	r1, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	4313      	orrs	r3, r2
         );
}
 800024e:	4618      	mov	r0, r3
 8000250:	3724      	adds	r7, #36	; 0x24
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000262:	699a      	ldr	r2, [r3, #24]
 8000264:	4907      	ldr	r1, [pc, #28]	; (8000284 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4313      	orrs	r3, r2
 800026a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <LL_APB2_GRP1_EnableClock+0x2c>)
 800026e:	699a      	ldr	r2, [r3, #24]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4013      	ands	r3, r2
 8000274:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000276:	68fb      	ldr	r3, [r7, #12]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40021000 	.word	0x40021000

08000288 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000288:	b490      	push	{r4, r7}
 800028a:	b088      	sub	sp, #32
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	461a      	mov	r2, r3
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	0e1b      	lsrs	r3, r3, #24
 800029c:	4413      	add	r3, r2
 800029e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80002a0:	6822      	ldr	r2, [r4, #0]
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	fa93 f3a3 	rbit	r3, r3
 80002ac:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	fab3 f383 	clz	r3, r3
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	210f      	movs	r1, #15
 80002ba:	fa01 f303 	lsl.w	r3, r1, r3
 80002be:	43db      	mvns	r3, r3
 80002c0:	401a      	ands	r2, r3
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	fa93 f3a3 	rbit	r3, r3
 80002cc:	61bb      	str	r3, [r7, #24]
  return result;
 80002ce:	69bb      	ldr	r3, [r7, #24]
 80002d0:	fab3 f383 	clz	r3, r3
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	6879      	ldr	r1, [r7, #4]
 80002da:	fa01 f303 	lsl.w	r3, r1, r3
 80002de:	4313      	orrs	r3, r2
 80002e0:	6023      	str	r3, [r4, #0]
}
 80002e2:	bf00      	nop
 80002e4:	3720      	adds	r7, #32
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc90      	pop	{r4, r7}
 80002ea:	4770      	bx	lr

080002ec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	615a      	str	r2, [r3, #20]
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
	...

0800030c <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <LL_GPIO_AF_SetEXTISource+0x58>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	3302      	adds	r3, #2
 800031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	0c1b      	lsrs	r3, r3, #16
 8000326:	43db      	mvns	r3, r3
 8000328:	ea02 0103 	and.w	r1, r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	fa93 f3a3 	rbit	r3, r3
 8000338:	60bb      	str	r3, [r7, #8]
  return result;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	fab3 f383 	clz	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	fa03 f202 	lsl.w	r2, r3, r2
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <LL_GPIO_AF_SetEXTISource+0x58>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	430a      	orrs	r2, r1
 8000352:	3302      	adds	r3, #2
 8000354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40010000 	.word	0x40010000

08000368 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000386:	2004      	movs	r0, #4
 8000388:	f7ff ff66 	bl	8000258 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800038c:	2008      	movs	r0, #8
 800038e:	f7ff ff63 	bl	8000258 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LO_Pin|d_Pin|e_Pin|g_Pin
 8000392:	492b      	ldr	r1, [pc, #172]	; (8000440 <MX_GPIO_Init+0xd8>)
 8000394:	482b      	ldr	r0, [pc, #172]	; (8000444 <MX_GPIO_Init+0xdc>)
 8000396:	f7ff ffa9 	bl	80002ec <LL_GPIO_ResetOutputPin>
                          |do_Pin|yo_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, a_Pin|c_Pin|b_Pin|f_Pin
 800039a:	492b      	ldr	r1, [pc, #172]	; (8000448 <MX_GPIO_Init+0xe0>)
 800039c:	482b      	ldr	r0, [pc, #172]	; (800044c <MX_GPIO_Init+0xe4>)
 800039e:	f7ff ffa5 	bl	80002ec <LL_GPIO_ResetOutputPin>
                          |led_Pin);

  /**/
  GPIO_InitStruct.Pin = LO_Pin|d_Pin|e_Pin|g_Pin
 80003a2:	4b27      	ldr	r3, [pc, #156]	; (8000440 <MX_GPIO_Init+0xd8>)
 80003a4:	607b      	str	r3, [r7, #4]
                          |do_Pin|yo_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003a6:	2301      	movs	r3, #1
 80003a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80003aa:	2303      	movs	r3, #3
 80003ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	4823      	ldr	r0, [pc, #140]	; (8000444 <MX_GPIO_Init+0xdc>)
 80003b8:	f001 f988 	bl	80016cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = a_Pin|c_Pin|b_Pin|f_Pin
 80003bc:	4b22      	ldr	r3, [pc, #136]	; (8000448 <MX_GPIO_Init+0xe0>)
 80003be:	607b      	str	r3, [r7, #4]
                          |led_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003c0:	2301      	movs	r3, #1
 80003c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80003c4:	2303      	movs	r3, #3
 80003c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4619      	mov	r1, r3
 80003d0:	481e      	ldr	r0, [pc, #120]	; (800044c <MX_GPIO_Init+0xe4>)
 80003d2:	f001 f97b 	bl	80016cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = button_Pin|sw_Pin;
 80003d6:	4b1e      	ldr	r3, [pc, #120]	; (8000450 <MX_GPIO_Init+0xe8>)
 80003d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80003da:	2304      	movs	r3, #4
 80003dc:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	481a      	ldr	r0, [pc, #104]	; (800044c <MX_GPIO_Init+0xe4>)
 80003e4:	f001 f972 	bl	80016cc <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE6);
 80003e8:	491a      	ldr	r1, [pc, #104]	; (8000454 <MX_GPIO_Init+0xec>)
 80003ea:	2001      	movs	r0, #1
 80003ec:	f7ff ff8e 	bl	800030c <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 80003f0:	2340      	movs	r3, #64	; 0x40
 80003f2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80003f4:	2301      	movs	r3, #1
 80003f6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80003f8:	2300      	movs	r3, #0
 80003fa:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80003fc:	2301      	movs	r3, #1
 80003fe:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000400:	f107 0318 	add.w	r3, r7, #24
 8000404:	4618      	mov	r0, r3
 8000406:	f001 f82d 	bl	8001464 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(pi_GPIO_Port, pi_Pin, LL_GPIO_MODE_FLOATING);
 800040a:	2204      	movs	r2, #4
 800040c:	f244 0140 	movw	r1, #16448	; 0x4040
 8000410:	480e      	ldr	r0, [pc, #56]	; (800044c <MX_GPIO_Init+0xe4>)
 8000412:	f7ff ff39 	bl	8000288 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000416:	f7ff fe99 	bl	800014c <__NVIC_GetPriorityGrouping>
 800041a:	4603      	mov	r3, r0
 800041c:	2200      	movs	r2, #0
 800041e:	2100      	movs	r1, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff fee7 	bl	80001f4 <NVIC_EncodePriority>
 8000426:	4603      	mov	r3, r0
 8000428:	4619      	mov	r1, r3
 800042a:	2017      	movs	r0, #23
 800042c:	f7ff feb8 	bl	80001a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000430:	2017      	movs	r0, #23
 8000432:	f7ff fe99 	bl	8000168 <__NVIC_EnableIRQ>

}
 8000436:	bf00      	nop
 8000438:	3720      	adds	r7, #32
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	041f041f 	.word	0x041f041f
 8000444:	40010800 	.word	0x40010800
 8000448:	04f200f2 	.word	0x04f200f2
 800044c:	40010c00 	.word	0x40010c00
 8000450:	04018081 	.word	0x04018081
 8000454:	0f000001 	.word	0x0f000001

08000458 <__NVIC_SetPriorityGrouping>:
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f003 0307 	and.w	r3, r3, #7
 8000466:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <__NVIC_SetPriorityGrouping+0x44>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800046e:	68ba      	ldr	r2, [r7, #8]
 8000470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000474:	4013      	ands	r3, r2
 8000476:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800048a:	4a04      	ldr	r2, [pc, #16]	; (800049c <__NVIC_SetPriorityGrouping+0x44>)
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	60d3      	str	r3, [r2, #12]
}
 8000490:	bf00      	nop
 8000492:	3714      	adds	r7, #20
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <LL_RCC_HSI_Enable+0x18>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a03      	ldr	r2, [pc, #12]	; (80004b8 <LL_RCC_HSI_Enable+0x18>)
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	6013      	str	r3, [r2, #0]
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	.word	0x40021000

080004bc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <LL_RCC_HSI_IsReady+0x20>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f003 0302 	and.w	r3, r3, #2
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	bf0c      	ite	eq
 80004cc:	2301      	moveq	r3, #1
 80004ce:	2300      	movne	r3, #0
 80004d0:	b2db      	uxtb	r3, r3
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	00db      	lsls	r3, r3, #3
 80004f4:	4903      	ldr	r1, [pc, #12]	; (8000504 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80004f6:	4313      	orrs	r3, r2
 80004f8:	600b      	str	r3, [r1, #0]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000

08000508 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <LL_RCC_SetSysClkSource+0x24>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f023 0203 	bic.w	r2, r3, #3
 8000518:	4904      	ldr	r1, [pc, #16]	; (800052c <LL_RCC_SetSysClkSource+0x24>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4313      	orrs	r3, r2
 800051e:	604b      	str	r3, [r1, #4]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <LL_RCC_GetSysClkSource+0x14>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	f003 030c 	and.w	r3, r3, #12
}
 800053c:	4618      	mov	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000

08000548 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <LL_RCC_SetAHBPrescaler+0x24>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000558:	4904      	ldr	r1, [pc, #16]	; (800056c <LL_RCC_SetAHBPrescaler+0x24>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	604b      	str	r3, [r1, #4]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LL_RCC_SetAPB1Prescaler+0x24>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000580:	4904      	ldr	r1, [pc, #16]	; (8000594 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4313      	orrs	r3, r2
 8000586:	604b      	str	r3, [r1, #4]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005a8:	4904      	ldr	r1, [pc, #16]	; (80005bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	604b      	str	r3, [r1, #4]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <LL_RCC_PLL_Enable+0x18>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a03      	ldr	r2, [pc, #12]	; (80005d8 <LL_RCC_PLL_Enable+0x18>)
 80005ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	40021000 	.word	0x40021000

080005dc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <LL_RCC_PLL_IsReady+0x20>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80005ec:	bf0c      	ite	eq
 80005ee:	2301      	moveq	r3, #1
 80005f0:	2300      	movne	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000

08000600 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	430b      	orrs	r3, r1
 800061c:	4903      	ldr	r1, [pc, #12]	; (800062c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800061e:	4313      	orrs	r3, r2
 8000620:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000

08000630 <LL_APB1_GRP1_EnableClock>:
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <LL_APB1_GRP1_EnableClock+0x2c>)
 800063a:	69da      	ldr	r2, [r3, #28]
 800063c:	4907      	ldr	r1, [pc, #28]	; (800065c <LL_APB1_GRP1_EnableClock+0x2c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4313      	orrs	r3, r2
 8000642:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000646:	69da      	ldr	r2, [r3, #28]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4013      	ands	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <LL_APB2_GRP1_EnableClock>:
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <LL_APB2_GRP1_EnableClock+0x2c>)
 800066a:	699a      	ldr	r2, [r3, #24]
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <LL_APB2_GRP1_EnableClock+0x2c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4313      	orrs	r3, r2
 8000672:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000676:	699a      	ldr	r2, [r3, #24]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4013      	ands	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000

08000690 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <LL_FLASH_SetLatency+0x24>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f023 0207 	bic.w	r2, r3, #7
 80006a0:	4904      	ldr	r1, [pc, #16]	; (80006b4 <LL_FLASH_SetLatency+0x24>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	600b      	str	r3, [r1, #0]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40022000 	.word	0x40022000

080006b8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <LL_FLASH_GetLatency+0x14>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 0307 	and.w	r3, r3, #7
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40022000 	.word	0x40022000

080006d0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f043 0201 	orr.w	r2, r3, #1
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr

080006ee <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f043 0201 	orr.w	r2, r3, #1
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60da      	str	r2, [r3, #12]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <LL_GPIO_ReadInputPort>:
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  return (READ_REG(GPIOx->IDR));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <LL_GPIO_SetOutputPin>:
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	b29a      	uxth	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	611a      	str	r2, [r3, #16]
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <LL_GPIO_ResetOutputPin>:
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	b29a      	uxth	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	615a      	str	r2, [r3, #20]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
	...

08000760 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800076a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076e:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4a03      	ldr	r2, [pc, #12]	; (8000784 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000776:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800077a:	6053      	str	r3, [r2, #4]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40010000 	.word	0x40010000

08000788 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ff67 	bl	8000660 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000792:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000796:	f7ff ff4b 	bl	8000630 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079a:	2003      	movs	r0, #3
 800079c:	f7ff fe5c 	bl	8000458 <__NVIC_SetPriorityGrouping>

	/* System interrupt init*/

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80007a0:	f7ff ffde 	bl	8000760 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007a4:	f000 f9d8 	bl	8000b58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007a8:	f7ff fdde 	bl	8000368 <MX_GPIO_Init>
	MX_TIM1_Init();
 80007ac:	f000 fd62 	bl	8001274 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	LL_TIM_EnableCounter(TIM1);
 80007b0:	489b      	ldr	r0, [pc, #620]	; (8000a20 <main+0x298>)
 80007b2:	f7ff ff8d 	bl	80006d0 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM1);
 80007b6:	489a      	ldr	r0, [pc, #616]	; (8000a20 <main+0x298>)
 80007b8:	f7ff ff99 	bl	80006ee <LL_TIM_EnableIT_UPDATE>
	if (((LL_GPIO_ReadInputPort(sw_GPIO_Port)) & (1<<8)) == 0){
 80007bc:	4899      	ldr	r0, [pc, #612]	; (8000a24 <main+0x29c>)
 80007be:	f7ff ffa5 	bl	800070c <LL_GPIO_ReadInputPort>
 80007c2:	4603      	mov	r3, r0
 80007c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10d      	bne.n	80007e8 <main+0x60>
		//HAL_Delay(100);
		LL_mDelay(100);
 80007cc:	2064      	movs	r0, #100	; 0x64
 80007ce:	f001 f89b 	bl	8001908 <LL_mDelay>
		if (((LL_GPIO_ReadInputPort(sw_GPIO_Port)) & (1<<8)) == 0)S=1;
 80007d2:	4894      	ldr	r0, [pc, #592]	; (8000a24 <main+0x29c>)
 80007d4:	f7ff ff9a 	bl	800070c <LL_GPIO_ReadInputPort>
 80007d8:	4603      	mov	r3, r0
 80007da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d102      	bne.n	80007e8 <main+0x60>
 80007e2:	4b91      	ldr	r3, [pc, #580]	; (8000a28 <main+0x2a0>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
	}
	if(!S)
 80007e8:	4b8f      	ldr	r3, [pc, #572]	; (8000a28 <main+0x2a0>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f083 0301 	eor.w	r3, r3, #1
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d004      	beq.n	8000800 <main+0x78>
		LL_GPIO_SetOutputPin(led_GPIO_Port, led_Pin);
 80007f6:	498d      	ldr	r1, [pc, #564]	; (8000a2c <main+0x2a4>)
 80007f8:	488a      	ldr	r0, [pc, #552]	; (8000a24 <main+0x29c>)
 80007fa:	f7ff ff92 	bl	8000722 <LL_GPIO_SetOutputPin>
 80007fe:	e003      	b.n	8000808 <main+0x80>
	else
		LL_GPIO_ResetOutputPin(led_GPIO_Port, led_Pin);
 8000800:	498a      	ldr	r1, [pc, #552]	; (8000a2c <main+0x2a4>)
 8000802:	4888      	ldr	r0, [pc, #544]	; (8000a24 <main+0x29c>)
 8000804:	f7ff ff9c 	bl	8000740 <LL_GPIO_ResetOutputPin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		show_n(nn, 0);
 8000808:	4b89      	ldr	r3, [pc, #548]	; (8000a30 <main+0x2a8>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f9e1 	bl	8000bd8 <show_n>
		i=0;
 8000816:	4b87      	ldr	r3, [pc, #540]	; (8000a34 <main+0x2ac>)
 8000818:	2200      	movs	r2, #0
 800081a:	801a      	strh	r2, [r3, #0]
		//				LL_GPIO_SetOutputPin(LO_GPIO_Port, LO_Pin);
		while(i<260)
 800081c:	e01d      	b.n	800085a <main+0xd2>
		{
			delay_us10;
 800081e:	4b86      	ldr	r3, [pc, #536]	; (8000a38 <main+0x2b0>)
 8000820:	2202      	movs	r2, #2
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	bf00      	nop
 8000826:	4b84      	ldr	r3, [pc, #528]	; (8000a38 <main+0x2b0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1fb      	bne.n	8000826 <main+0x9e>
			i++;
 800082e:	4b81      	ldr	r3, [pc, #516]	; (8000a34 <main+0x2ac>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	b29a      	uxth	r2, r3
 8000836:	4b7f      	ldr	r3, [pc, #508]	; (8000a34 <main+0x2ac>)
 8000838:	801a      	strh	r2, [r3, #0]
			if(i%4==0){
 800083a:	4b7e      	ldr	r3, [pc, #504]	; (8000a34 <main+0x2ac>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	f003 0303 	and.w	r3, r3, #3
 8000842:	b29b      	uxth	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d104      	bne.n	8000852 <main+0xca>
				LL_GPIO_SetOutputPin(do_GPIO_Port, do_Pin);
 8000848:	497c      	ldr	r1, [pc, #496]	; (8000a3c <main+0x2b4>)
 800084a:	487d      	ldr	r0, [pc, #500]	; (8000a40 <main+0x2b8>)
 800084c:	f7ff ff69 	bl	8000722 <LL_GPIO_SetOutputPin>
 8000850:	e003      	b.n	800085a <main+0xd2>
			}else{
				LL_GPIO_ResetOutputPin(do_GPIO_Port, do_Pin);
 8000852:	497a      	ldr	r1, [pc, #488]	; (8000a3c <main+0x2b4>)
 8000854:	487a      	ldr	r0, [pc, #488]	; (8000a40 <main+0x2b8>)
 8000856:	f7ff ff73 	bl	8000740 <LL_GPIO_ResetOutputPin>
		while(i<260)
 800085a:	4b76      	ldr	r3, [pc, #472]	; (8000a34 <main+0x2ac>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000862:	d3dc      	bcc.n	800081e <main+0x96>
			}
		}


		show_n(nn, 1);
 8000864:	4b72      	ldr	r3, [pc, #456]	; (8000a30 <main+0x2a8>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2101      	movs	r1, #1
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f9b3 	bl	8000bd8 <show_n>
		i=0;
 8000872:	4b70      	ldr	r3, [pc, #448]	; (8000a34 <main+0x2ac>)
 8000874:	2200      	movs	r2, #0
 8000876:	801a      	strh	r2, [r3, #0]
		//				LL_GPIO_SetOutputPin(LO_GPIO_Port, LO_Pin);
		while(i<260)
 8000878:	e01d      	b.n	80008b6 <main+0x12e>
		{
			delay_us10;
 800087a:	4b6f      	ldr	r3, [pc, #444]	; (8000a38 <main+0x2b0>)
 800087c:	2202      	movs	r2, #2
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	bf00      	nop
 8000882:	4b6d      	ldr	r3, [pc, #436]	; (8000a38 <main+0x2b0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1fb      	bne.n	8000882 <main+0xfa>
			i++;
 800088a:	4b6a      	ldr	r3, [pc, #424]	; (8000a34 <main+0x2ac>)
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b68      	ldr	r3, [pc, #416]	; (8000a34 <main+0x2ac>)
 8000894:	801a      	strh	r2, [r3, #0]
			if(i%4==0){
 8000896:	4b67      	ldr	r3, [pc, #412]	; (8000a34 <main+0x2ac>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	f003 0303 	and.w	r3, r3, #3
 800089e:	b29b      	uxth	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d104      	bne.n	80008ae <main+0x126>
				LL_GPIO_SetOutputPin(yo_GPIO_Port, yo_Pin);
 80008a4:	4967      	ldr	r1, [pc, #412]	; (8000a44 <main+0x2bc>)
 80008a6:	4866      	ldr	r0, [pc, #408]	; (8000a40 <main+0x2b8>)
 80008a8:	f7ff ff3b 	bl	8000722 <LL_GPIO_SetOutputPin>
 80008ac:	e003      	b.n	80008b6 <main+0x12e>
			}else{
				LL_GPIO_ResetOutputPin(yo_GPIO_Port, yo_Pin);
 80008ae:	4965      	ldr	r1, [pc, #404]	; (8000a44 <main+0x2bc>)
 80008b0:	4863      	ldr	r0, [pc, #396]	; (8000a40 <main+0x2b8>)
 80008b2:	f7ff ff45 	bl	8000740 <LL_GPIO_ResetOutputPin>
		while(i<260)
 80008b6:	4b5f      	ldr	r3, [pc, #380]	; (8000a34 <main+0x2ac>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80008be:	d3dc      	bcc.n	800087a <main+0xf2>
			}
		}

		if (((LL_GPIO_ReadInputPort(button_GPIO_Port)) & (1<<7)) == 0){
 80008c0:	4858      	ldr	r0, [pc, #352]	; (8000a24 <main+0x29c>)
 80008c2:	f7ff ff23 	bl	800070c <LL_GPIO_ReadInputPort>
 80008c6:	4603      	mov	r3, r0
 80008c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d10d      	bne.n	80008ec <main+0x164>
			Gcnt++;
 80008d0:	4b5d      	ldr	r3, [pc, #372]	; (8000a48 <main+0x2c0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a5c      	ldr	r2, [pc, #368]	; (8000a48 <main+0x2c0>)
 80008d8:	6013      	str	r3, [r2, #0]
			if(Gcnt>150000)
 80008da:	4b5b      	ldr	r3, [pc, #364]	; (8000a48 <main+0x2c0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a5b      	ldr	r2, [pc, #364]	; (8000a4c <main+0x2c4>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d91b      	bls.n	800091c <main+0x194>
				C=1;
 80008e4:	4b5a      	ldr	r3, [pc, #360]	; (8000a50 <main+0x2c8>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	e017      	b.n	800091c <main+0x194>
		}else{
			if(Gcnt>150000)
 80008ec:	4b56      	ldr	r3, [pc, #344]	; (8000a48 <main+0x2c0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a56      	ldr	r2, [pc, #344]	; (8000a4c <main+0x2c4>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d903      	bls.n	80008fe <main+0x176>
				C=1;
 80008f6:	4b56      	ldr	r3, [pc, #344]	; (8000a50 <main+0x2c8>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	e00b      	b.n	8000916 <main+0x18e>
			else if(Gcnt>10000)
 80008fe:	4b52      	ldr	r3, [pc, #328]	; (8000a48 <main+0x2c0>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f242 7210 	movw	r2, #10000	; 0x2710
 8000906:	4293      	cmp	r3, r2
 8000908:	d905      	bls.n	8000916 <main+0x18e>
			{
				G=1;
 800090a:	4b52      	ldr	r3, [pc, #328]	; (8000a54 <main+0x2cc>)
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
				C=0;
 8000910:	4b4f      	ldr	r3, [pc, #316]	; (8000a50 <main+0x2c8>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
			}
			Gcnt=0;
 8000916:	4b4c      	ldr	r3, [pc, #304]	; (8000a48 <main+0x2c0>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
		}
		if((G || S)&&!C)
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <main+0x2cc>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d104      	bne.n	800092e <main+0x1a6>
 8000924:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <main+0x2a0>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	f000 80df 	beq.w	8000aec <main+0x364>
 800092e:	4b48      	ldr	r3, [pc, #288]	; (8000a50 <main+0x2c8>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	f083 0301 	eor.w	r3, r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	f000 80d7 	beq.w	8000aec <main+0x364>
		//while(1)
		{
			//LL_GPIO_ResetOutputPin(led_GPIO_Port, led_Pin);
			//while(1)
			if(shot)
 800093e:	4b46      	ldr	r3, [pc, #280]	; (8000a58 <main+0x2d0>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	f000 80d2 	beq.w	8000aec <main+0x364>
			{
				//LL_mDelay(20);
				i=0;
 8000948:	4b3a      	ldr	r3, [pc, #232]	; (8000a34 <main+0x2ac>)
 800094a:	2200      	movs	r2, #0
 800094c:	801a      	strh	r2, [r3, #0]
				//				LL_GPIO_SetOutputPin(LO_GPIO_Port, LO_Pin);
				while(i<135)
 800094e:	e01f      	b.n	8000990 <main+0x208>
				{
					LL_GPIO_SetOutputPin(LO_GPIO_Port, LO_Pin);
 8000950:	f240 4104 	movw	r1, #1028	; 0x404
 8000954:	483a      	ldr	r0, [pc, #232]	; (8000a40 <main+0x2b8>)
 8000956:	f7ff fee4 	bl	8000722 <LL_GPIO_SetOutputPin>
					delay_us10;
 800095a:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <main+0x2b0>)
 800095c:	2202      	movs	r2, #2
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	bf00      	nop
 8000962:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <main+0x2b0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1fb      	bne.n	8000962 <main+0x1da>
					LL_GPIO_ResetOutputPin(LO_GPIO_Port, LO_Pin);
 800096a:	f240 4104 	movw	r1, #1028	; 0x404
 800096e:	4834      	ldr	r0, [pc, #208]	; (8000a40 <main+0x2b8>)
 8000970:	f7ff fee6 	bl	8000740 <LL_GPIO_ResetOutputPin>
					delay_us10;
 8000974:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <main+0x2b0>)
 8000976:	2202      	movs	r2, #2
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	bf00      	nop
 800097c:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <main+0x2b0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1fb      	bne.n	800097c <main+0x1f4>
					i++;
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <main+0x2ac>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <main+0x2ac>)
 800098e:	801a      	strh	r2, [r3, #0]
				while(i<135)
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <main+0x2ac>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	2b86      	cmp	r3, #134	; 0x86
 8000996:	d9db      	bls.n	8000950 <main+0x1c8>
				}
				//GPIOA->ODR = (GPIOA->ODR)&(0b1111111111111011);
				//				LL_GPIO_ResetOutputPin(LO_GPIO_Port, LO_Pin);
				i=0;
 8000998:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <main+0x2ac>)
 800099a:	2200      	movs	r2, #0
 800099c:	801a      	strh	r2, [r3, #0]
				while(i<375){
 800099e:	e00d      	b.n	80009bc <main+0x234>
					delay_us10;
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <main+0x2b0>)
 80009a2:	2202      	movs	r2, #2
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	bf00      	nop
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <main+0x2b0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1fb      	bne.n	80009a8 <main+0x220>
					i++;
 80009b0:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <main+0x2ac>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <main+0x2ac>)
 80009ba:	801a      	strh	r2, [r3, #0]
				while(i<375){
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <main+0x2ac>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 80009c4:	d9ec      	bls.n	80009a0 <main+0x218>
				}
				//LL_mDelay(6);
				i=0;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <main+0x2ac>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	801a      	strh	r2, [r3, #0]
				//			LL_GPIO_SetOutputPin(LO_GPIO_Port, LO_Pin);
				while(i<175)
 80009cc:	e01f      	b.n	8000a0e <main+0x286>
				{
					LL_GPIO_SetOutputPin(LO_GPIO_Port, LO_Pin);
 80009ce:	f240 4104 	movw	r1, #1028	; 0x404
 80009d2:	481b      	ldr	r0, [pc, #108]	; (8000a40 <main+0x2b8>)
 80009d4:	f7ff fea5 	bl	8000722 <LL_GPIO_SetOutputPin>
					delay_us10;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <main+0x2b0>)
 80009da:	2202      	movs	r2, #2
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	bf00      	nop
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <main+0x2b0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1fb      	bne.n	80009e0 <main+0x258>
					LL_GPIO_ResetOutputPin(LO_GPIO_Port, LO_Pin);
 80009e8:	f240 4104 	movw	r1, #1028	; 0x404
 80009ec:	4814      	ldr	r0, [pc, #80]	; (8000a40 <main+0x2b8>)
 80009ee:	f7ff fea7 	bl	8000740 <LL_GPIO_ResetOutputPin>
					delay_us10;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <main+0x2b0>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	bf00      	nop
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <main+0x2b0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1fb      	bne.n	80009fa <main+0x272>
					i++;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <main+0x2ac>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <main+0x2ac>)
 8000a0c:	801a      	strh	r2, [r3, #0]
				while(i<175)
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <main+0x2ac>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	2bae      	cmp	r3, #174	; 0xae
 8000a14:	d9db      	bls.n	80009ce <main+0x246>
				}
				//GPIOA->ODR = (GPIOA->ODR)&(0b1111111111111011);
				//		LL_GPIO_ResetOutputPin(LO_GPIO_Port, LO_Pin);
				//LL_mDelay(7);
				i=0;
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <main+0x2ac>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	801a      	strh	r2, [r3, #0]
				while(i<440){
 8000a1c:	e02c      	b.n	8000a78 <main+0x2f0>
 8000a1e:	bf00      	nop
 8000a20:	40012c00 	.word	0x40012c00
 8000a24:	40010c00 	.word	0x40010c00
 8000a28:	20000030 	.word	0x20000030
 8000a2c:	04020002 	.word	0x04020002
 8000a30:	2000002c 	.word	0x2000002c
 8000a34:	20000032 	.word	0x20000032
 8000a38:	20000028 	.word	0x20000028
 8000a3c:	04080008 	.word	0x04080008
 8000a40:	40010800 	.word	0x40010800
 8000a44:	04100010 	.word	0x04100010
 8000a48:	20000024 	.word	0x20000024
 8000a4c:	000249f0 	.word	0x000249f0
 8000a50:	2000002f 	.word	0x2000002f
 8000a54:	2000002e 	.word	0x2000002e
 8000a58:	20000034 	.word	0x20000034
					delay_us10;
 8000a5c:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <main+0x3a8>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	bf00      	nop
 8000a64:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <main+0x3a8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1fb      	bne.n	8000a64 <main+0x2dc>
					i++;
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <main+0x3ac>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <main+0x3ac>)
 8000a76:	801a      	strh	r2, [r3, #0]
				while(i<440){
 8000a78:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <main+0x3ac>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8000a80:	d3ec      	bcc.n	8000a5c <main+0x2d4>
				}
				i=0;
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <main+0x3ac>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	801a      	strh	r2, [r3, #0]
				while(i<500){
 8000a88:	e01f      	b.n	8000aca <main+0x342>
					LL_GPIO_SetOutputPin(LO_GPIO_Port, LO_Pin);
 8000a8a:	f240 4104 	movw	r1, #1028	; 0x404
 8000a8e:	482a      	ldr	r0, [pc, #168]	; (8000b38 <main+0x3b0>)
 8000a90:	f7ff fe47 	bl	8000722 <LL_GPIO_SetOutputPin>
					delay_us10;
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <main+0x3a8>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	bf00      	nop
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <main+0x3a8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1fb      	bne.n	8000a9c <main+0x314>
					LL_GPIO_ResetOutputPin(LO_GPIO_Port, LO_Pin);
 8000aa4:	f240 4104 	movw	r1, #1028	; 0x404
 8000aa8:	4823      	ldr	r0, [pc, #140]	; (8000b38 <main+0x3b0>)
 8000aaa:	f7ff fe49 	bl	8000740 <LL_GPIO_ResetOutputPin>
					delay_us10;
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <main+0x3a8>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	bf00      	nop
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <main+0x3a8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1fb      	bne.n	8000ab6 <main+0x32e>
					i++;
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <main+0x3ac>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <main+0x3ac>)
 8000ac8:	801a      	strh	r2, [r3, #0]
				while(i<500){
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <main+0x3ac>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ad2:	d3da      	bcc.n	8000a8a <main+0x302>
				//					//					delay_us10;
				//					i++;
				//				}
				//LL_GPIO_ResetOutputPin(LO_GPIO_Port, LO_Pin);
				//GPIOA->ODR = (GPIOA->ODR)&(0b1111111111111011);
				shot=0;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <main+0x3b4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
				nn++;
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <main+0x3b8>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <main+0x3b8>)
 8000ae4:	801a      	strh	r2, [r3, #0]
				//if(n>100)n=0;
				G=0;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <main+0x3bc>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
			}
		}
		//		else{
		//			LL_GPIO_SetOutputPin(led_GPIO_Port, led_Pin);
		//		}
		if(C){//calibration of laser
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <main+0x3c0>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d005      	beq.n	8000b00 <main+0x378>
			LL_GPIO_SetOutputPin(LO_GPIO_Port, LO_Pin);
 8000af4:	f240 4104 	movw	r1, #1028	; 0x404
 8000af8:	480f      	ldr	r0, [pc, #60]	; (8000b38 <main+0x3b0>)
 8000afa:	f7ff fe12 	bl	8000722 <LL_GPIO_SetOutputPin>
 8000afe:	e004      	b.n	8000b0a <main+0x382>
		}else{
			LL_GPIO_ResetOutputPin(LO_GPIO_Port, LO_Pin);
 8000b00:	f240 4104 	movw	r1, #1028	; 0x404
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <main+0x3b0>)
 8000b06:	f7ff fe1b 	bl	8000740 <LL_GPIO_ResetOutputPin>
		}


		if(G||S){//calibration of laser
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <main+0x3bc>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d103      	bne.n	8000b1a <main+0x392>
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <main+0x3c4>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d004      	beq.n	8000b24 <main+0x39c>
			LL_GPIO_ResetOutputPin(led_GPIO_Port, led_Pin);
 8000b1a:	490d      	ldr	r1, [pc, #52]	; (8000b50 <main+0x3c8>)
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <main+0x3cc>)
 8000b1e:	f7ff fe0f 	bl	8000740 <LL_GPIO_ResetOutputPin>
 8000b22:	e003      	b.n	8000b2c <main+0x3a4>
		}else{
			LL_GPIO_SetOutputPin(led_GPIO_Port, led_Pin);
 8000b24:	490a      	ldr	r1, [pc, #40]	; (8000b50 <main+0x3c8>)
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <main+0x3cc>)
 8000b28:	f7ff fdfb 	bl	8000722 <LL_GPIO_SetOutputPin>
		show_n(nn, 0);
 8000b2c:	e66c      	b.n	8000808 <main+0x80>
 8000b2e:	bf00      	nop
 8000b30:	20000028 	.word	0x20000028
 8000b34:	20000032 	.word	0x20000032
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	20000034 	.word	0x20000034
 8000b40:	2000002c 	.word	0x2000002c
 8000b44:	2000002e 	.word	0x2000002e
 8000b48:	2000002f 	.word	0x2000002f
 8000b4c:	20000030 	.word	0x20000030
 8000b50:	04020002 	.word	0x04020002
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f7ff fd97 	bl	8000690 <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000b62:	bf00      	nop
 8000b64:	f7ff fda8 	bl	80006b8 <LL_FLASH_GetLatency>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d1fa      	bne.n	8000b64 <SystemClock_Config+0xc>
	{
	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8000b6e:	2010      	movs	r0, #16
 8000b70:	f7ff fcb6 	bl	80004e0 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_HSI_Enable();
 8000b74:	f7ff fc94 	bl	80004a0 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1)
 8000b78:	bf00      	nop
 8000b7a:	f7ff fc9f 	bl	80004bc <LL_RCC_HSI_IsReady>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d1fa      	bne.n	8000b7a <SystemClock_Config+0x22>
	{

	}
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 8000b84:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff fd39 	bl	8000600 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8000b8e:	f7ff fd17 	bl	80005c0 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1)
 8000b92:	bf00      	nop
 8000b94:	f7ff fd22 	bl	80005dc <LL_RCC_PLL_IsReady>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d1fa      	bne.n	8000b94 <SystemClock_Config+0x3c>
	{

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fcd2 	bl	8000548 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000ba4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ba8:	f7ff fce2 	bl	8000570 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff fcf3 	bl	8000598 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f7ff fca8 	bl	8000508 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000bb8:	bf00      	nop
 8000bba:	f7ff fcb9 	bl	8000530 <LL_RCC_GetSysClkSource>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	d1fa      	bne.n	8000bba <SystemClock_Config+0x62>
	{

	}
	LL_Init1msTick(64000000);
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <SystemClock_Config+0x7c>)
 8000bc6:	f000 fe91 	bl	80018ec <LL_Init1msTick>
	LL_SetSystemCoreClock(64000000);
 8000bca:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <SystemClock_Config+0x7c>)
 8000bcc:	f000 fec0 	bl	8001950 <LL_SetSystemCoreClock>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	03d09000 	.word	0x03d09000

08000bd8 <show_n>:

/* USER CODE BEGIN 4 */
void show_n(uint8_t n,_Bool q){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	4613      	mov	r3, r2
 8000be6:	71bb      	strb	r3, [r7, #6]
	uint8_t b=0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]
	if(q)
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d013      	beq.n	8000c1a <show_n+0x42>
	{
		b=n%10;
 8000bf2:	79fa      	ldrb	r2, [r7, #7]
 8000bf4:	4ba5      	ldr	r3, [pc, #660]	; (8000e8c <show_n+0x2b4>)
 8000bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8000bfa:	08d9      	lsrs	r1, r3, #3
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	440b      	add	r3, r1
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	73fb      	strb	r3, [r7, #15]
		LL_GPIO_SetOutputPin(yo_GPIO_Port, yo_Pin);
 8000c08:	49a1      	ldr	r1, [pc, #644]	; (8000e90 <show_n+0x2b8>)
 8000c0a:	48a2      	ldr	r0, [pc, #648]	; (8000e94 <show_n+0x2bc>)
 8000c0c:	f7ff fd89 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(do_GPIO_Port, do_Pin);
 8000c10:	49a1      	ldr	r1, [pc, #644]	; (8000e98 <show_n+0x2c0>)
 8000c12:	48a0      	ldr	r0, [pc, #640]	; (8000e94 <show_n+0x2bc>)
 8000c14:	f7ff fd94 	bl	8000740 <LL_GPIO_ResetOutputPin>
 8000c18:	e017      	b.n	8000c4a <show_n+0x72>
	}else{
		b=(n/10)%10;
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4a9b      	ldr	r2, [pc, #620]	; (8000e8c <show_n+0x2b4>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	08db      	lsrs	r3, r3, #3
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b99      	ldr	r3, [pc, #612]	; (8000e8c <show_n+0x2b4>)
 8000c28:	fba3 1302 	umull	r1, r3, r3, r2
 8000c2c:	08d9      	lsrs	r1, r3, #3
 8000c2e:	460b      	mov	r3, r1
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	440b      	add	r3, r1
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	73fb      	strb	r3, [r7, #15]
		LL_GPIO_ResetOutputPin(yo_GPIO_Port, yo_Pin);
 8000c3a:	4995      	ldr	r1, [pc, #596]	; (8000e90 <show_n+0x2b8>)
 8000c3c:	4895      	ldr	r0, [pc, #596]	; (8000e94 <show_n+0x2bc>)
 8000c3e:	f7ff fd7f 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(do_GPIO_Port, do_Pin);
 8000c42:	4995      	ldr	r1, [pc, #596]	; (8000e98 <show_n+0x2c0>)
 8000c44:	4893      	ldr	r0, [pc, #588]	; (8000e94 <show_n+0x2bc>)
 8000c46:	f7ff fd6c 	bl	8000722 <LL_GPIO_SetOutputPin>
	}
	switch(b){
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	f200 8150 	bhi.w	8000ef2 <show_n+0x31a>
 8000c52:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <show_n+0x80>)
 8000c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	08000cbb 	.word	0x08000cbb
 8000c60:	08000cf5 	.word	0x08000cf5
 8000c64:	08000d2f 	.word	0x08000d2f
 8000c68:	08000d69 	.word	0x08000d69
 8000c6c:	08000da3 	.word	0x08000da3
 8000c70:	08000ddd 	.word	0x08000ddd
 8000c74:	08000e17 	.word	0x08000e17
 8000c78:	08000e51 	.word	0x08000e51
 8000c7c:	08000eb9 	.word	0x08000eb9
	case 0:
		LL_GPIO_SetOutputPin(a_GPIO_Port, a_Pin);
 8000c80:	4983      	ldr	r1, [pc, #524]	; (8000e90 <show_n+0x2b8>)
 8000c82:	4886      	ldr	r0, [pc, #536]	; (8000e9c <show_n+0x2c4>)
 8000c84:	f7ff fd4d 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(b_GPIO_Port, b_Pin);
 8000c88:	4985      	ldr	r1, [pc, #532]	; (8000ea0 <show_n+0x2c8>)
 8000c8a:	4884      	ldr	r0, [pc, #528]	; (8000e9c <show_n+0x2c4>)
 8000c8c:	f7ff fd49 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(c_GPIO_Port, c_Pin);
 8000c90:	4984      	ldr	r1, [pc, #528]	; (8000ea4 <show_n+0x2cc>)
 8000c92:	4882      	ldr	r0, [pc, #520]	; (8000e9c <show_n+0x2c4>)
 8000c94:	f7ff fd45 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(d_GPIO_Port, d_Pin);
 8000c98:	4983      	ldr	r1, [pc, #524]	; (8000ea8 <show_n+0x2d0>)
 8000c9a:	487e      	ldr	r0, [pc, #504]	; (8000e94 <show_n+0x2bc>)
 8000c9c:	f7ff fd41 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(e_GPIO_Port, e_Pin);
 8000ca0:	4982      	ldr	r1, [pc, #520]	; (8000eac <show_n+0x2d4>)
 8000ca2:	487c      	ldr	r0, [pc, #496]	; (8000e94 <show_n+0x2bc>)
 8000ca4:	f7ff fd3d 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(f_GPIO_Port, f_Pin);
 8000ca8:	4981      	ldr	r1, [pc, #516]	; (8000eb0 <show_n+0x2d8>)
 8000caa:	487c      	ldr	r0, [pc, #496]	; (8000e9c <show_n+0x2c4>)
 8000cac:	f7ff fd39 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(g_GPIO_Port, g_Pin);
 8000cb0:	4980      	ldr	r1, [pc, #512]	; (8000eb4 <show_n+0x2dc>)
 8000cb2:	4878      	ldr	r0, [pc, #480]	; (8000e94 <show_n+0x2bc>)
 8000cb4:	f7ff fd44 	bl	8000740 <LL_GPIO_ResetOutputPin>
		break;
 8000cb8:	e11b      	b.n	8000ef2 <show_n+0x31a>
	case 1:
		LL_GPIO_ResetOutputPin(a_GPIO_Port, a_Pin);
 8000cba:	4975      	ldr	r1, [pc, #468]	; (8000e90 <show_n+0x2b8>)
 8000cbc:	4877      	ldr	r0, [pc, #476]	; (8000e9c <show_n+0x2c4>)
 8000cbe:	f7ff fd3f 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(b_GPIO_Port, b_Pin);
 8000cc2:	4977      	ldr	r1, [pc, #476]	; (8000ea0 <show_n+0x2c8>)
 8000cc4:	4875      	ldr	r0, [pc, #468]	; (8000e9c <show_n+0x2c4>)
 8000cc6:	f7ff fd2c 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(c_GPIO_Port, c_Pin);
 8000cca:	4976      	ldr	r1, [pc, #472]	; (8000ea4 <show_n+0x2cc>)
 8000ccc:	4873      	ldr	r0, [pc, #460]	; (8000e9c <show_n+0x2c4>)
 8000cce:	f7ff fd28 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(d_GPIO_Port, d_Pin);
 8000cd2:	4975      	ldr	r1, [pc, #468]	; (8000ea8 <show_n+0x2d0>)
 8000cd4:	486f      	ldr	r0, [pc, #444]	; (8000e94 <show_n+0x2bc>)
 8000cd6:	f7ff fd33 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(e_GPIO_Port, e_Pin);
 8000cda:	4974      	ldr	r1, [pc, #464]	; (8000eac <show_n+0x2d4>)
 8000cdc:	486d      	ldr	r0, [pc, #436]	; (8000e94 <show_n+0x2bc>)
 8000cde:	f7ff fd2f 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(f_GPIO_Port, f_Pin);
 8000ce2:	4973      	ldr	r1, [pc, #460]	; (8000eb0 <show_n+0x2d8>)
 8000ce4:	486d      	ldr	r0, [pc, #436]	; (8000e9c <show_n+0x2c4>)
 8000ce6:	f7ff fd2b 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(g_GPIO_Port, g_Pin);
 8000cea:	4972      	ldr	r1, [pc, #456]	; (8000eb4 <show_n+0x2dc>)
 8000cec:	4869      	ldr	r0, [pc, #420]	; (8000e94 <show_n+0x2bc>)
 8000cee:	f7ff fd27 	bl	8000740 <LL_GPIO_ResetOutputPin>
		break;
 8000cf2:	e0fe      	b.n	8000ef2 <show_n+0x31a>
	case 2:
		LL_GPIO_SetOutputPin(a_GPIO_Port, a_Pin);
 8000cf4:	4966      	ldr	r1, [pc, #408]	; (8000e90 <show_n+0x2b8>)
 8000cf6:	4869      	ldr	r0, [pc, #420]	; (8000e9c <show_n+0x2c4>)
 8000cf8:	f7ff fd13 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(b_GPIO_Port, b_Pin);
 8000cfc:	4968      	ldr	r1, [pc, #416]	; (8000ea0 <show_n+0x2c8>)
 8000cfe:	4867      	ldr	r0, [pc, #412]	; (8000e9c <show_n+0x2c4>)
 8000d00:	f7ff fd0f 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(c_GPIO_Port, c_Pin);
 8000d04:	4967      	ldr	r1, [pc, #412]	; (8000ea4 <show_n+0x2cc>)
 8000d06:	4865      	ldr	r0, [pc, #404]	; (8000e9c <show_n+0x2c4>)
 8000d08:	f7ff fd1a 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(d_GPIO_Port, d_Pin);
 8000d0c:	4966      	ldr	r1, [pc, #408]	; (8000ea8 <show_n+0x2d0>)
 8000d0e:	4861      	ldr	r0, [pc, #388]	; (8000e94 <show_n+0x2bc>)
 8000d10:	f7ff fd07 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(e_GPIO_Port, e_Pin);
 8000d14:	4965      	ldr	r1, [pc, #404]	; (8000eac <show_n+0x2d4>)
 8000d16:	485f      	ldr	r0, [pc, #380]	; (8000e94 <show_n+0x2bc>)
 8000d18:	f7ff fd03 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(f_GPIO_Port, f_Pin);
 8000d1c:	4964      	ldr	r1, [pc, #400]	; (8000eb0 <show_n+0x2d8>)
 8000d1e:	485f      	ldr	r0, [pc, #380]	; (8000e9c <show_n+0x2c4>)
 8000d20:	f7ff fd0e 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(g_GPIO_Port, g_Pin);
 8000d24:	4963      	ldr	r1, [pc, #396]	; (8000eb4 <show_n+0x2dc>)
 8000d26:	485b      	ldr	r0, [pc, #364]	; (8000e94 <show_n+0x2bc>)
 8000d28:	f7ff fcfb 	bl	8000722 <LL_GPIO_SetOutputPin>
		break;
 8000d2c:	e0e1      	b.n	8000ef2 <show_n+0x31a>
	case 3:
		LL_GPIO_SetOutputPin(a_GPIO_Port, a_Pin);
 8000d2e:	4958      	ldr	r1, [pc, #352]	; (8000e90 <show_n+0x2b8>)
 8000d30:	485a      	ldr	r0, [pc, #360]	; (8000e9c <show_n+0x2c4>)
 8000d32:	f7ff fcf6 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(b_GPIO_Port, b_Pin);
 8000d36:	495a      	ldr	r1, [pc, #360]	; (8000ea0 <show_n+0x2c8>)
 8000d38:	4858      	ldr	r0, [pc, #352]	; (8000e9c <show_n+0x2c4>)
 8000d3a:	f7ff fcf2 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(c_GPIO_Port, c_Pin);
 8000d3e:	4959      	ldr	r1, [pc, #356]	; (8000ea4 <show_n+0x2cc>)
 8000d40:	4856      	ldr	r0, [pc, #344]	; (8000e9c <show_n+0x2c4>)
 8000d42:	f7ff fcee 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(d_GPIO_Port, d_Pin);
 8000d46:	4958      	ldr	r1, [pc, #352]	; (8000ea8 <show_n+0x2d0>)
 8000d48:	4852      	ldr	r0, [pc, #328]	; (8000e94 <show_n+0x2bc>)
 8000d4a:	f7ff fcea 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(e_GPIO_Port, e_Pin);
 8000d4e:	4957      	ldr	r1, [pc, #348]	; (8000eac <show_n+0x2d4>)
 8000d50:	4850      	ldr	r0, [pc, #320]	; (8000e94 <show_n+0x2bc>)
 8000d52:	f7ff fcf5 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(f_GPIO_Port, f_Pin);
 8000d56:	4956      	ldr	r1, [pc, #344]	; (8000eb0 <show_n+0x2d8>)
 8000d58:	4850      	ldr	r0, [pc, #320]	; (8000e9c <show_n+0x2c4>)
 8000d5a:	f7ff fcf1 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(g_GPIO_Port, g_Pin);
 8000d5e:	4955      	ldr	r1, [pc, #340]	; (8000eb4 <show_n+0x2dc>)
 8000d60:	484c      	ldr	r0, [pc, #304]	; (8000e94 <show_n+0x2bc>)
 8000d62:	f7ff fcde 	bl	8000722 <LL_GPIO_SetOutputPin>
		break;
 8000d66:	e0c4      	b.n	8000ef2 <show_n+0x31a>
	case 4:
		LL_GPIO_ResetOutputPin(a_GPIO_Port, a_Pin);
 8000d68:	4949      	ldr	r1, [pc, #292]	; (8000e90 <show_n+0x2b8>)
 8000d6a:	484c      	ldr	r0, [pc, #304]	; (8000e9c <show_n+0x2c4>)
 8000d6c:	f7ff fce8 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(b_GPIO_Port, b_Pin);
 8000d70:	494b      	ldr	r1, [pc, #300]	; (8000ea0 <show_n+0x2c8>)
 8000d72:	484a      	ldr	r0, [pc, #296]	; (8000e9c <show_n+0x2c4>)
 8000d74:	f7ff fcd5 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(c_GPIO_Port, c_Pin);
 8000d78:	494a      	ldr	r1, [pc, #296]	; (8000ea4 <show_n+0x2cc>)
 8000d7a:	4848      	ldr	r0, [pc, #288]	; (8000e9c <show_n+0x2c4>)
 8000d7c:	f7ff fcd1 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(d_GPIO_Port, d_Pin);
 8000d80:	4949      	ldr	r1, [pc, #292]	; (8000ea8 <show_n+0x2d0>)
 8000d82:	4844      	ldr	r0, [pc, #272]	; (8000e94 <show_n+0x2bc>)
 8000d84:	f7ff fcdc 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(e_GPIO_Port, e_Pin);
 8000d88:	4948      	ldr	r1, [pc, #288]	; (8000eac <show_n+0x2d4>)
 8000d8a:	4842      	ldr	r0, [pc, #264]	; (8000e94 <show_n+0x2bc>)
 8000d8c:	f7ff fcd8 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(f_GPIO_Port, f_Pin);
 8000d90:	4947      	ldr	r1, [pc, #284]	; (8000eb0 <show_n+0x2d8>)
 8000d92:	4842      	ldr	r0, [pc, #264]	; (8000e9c <show_n+0x2c4>)
 8000d94:	f7ff fcc5 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(g_GPIO_Port, g_Pin);
 8000d98:	4946      	ldr	r1, [pc, #280]	; (8000eb4 <show_n+0x2dc>)
 8000d9a:	483e      	ldr	r0, [pc, #248]	; (8000e94 <show_n+0x2bc>)
 8000d9c:	f7ff fcc1 	bl	8000722 <LL_GPIO_SetOutputPin>
		break;
 8000da0:	e0a7      	b.n	8000ef2 <show_n+0x31a>
	case 5:
		LL_GPIO_SetOutputPin(a_GPIO_Port, a_Pin);
 8000da2:	493b      	ldr	r1, [pc, #236]	; (8000e90 <show_n+0x2b8>)
 8000da4:	483d      	ldr	r0, [pc, #244]	; (8000e9c <show_n+0x2c4>)
 8000da6:	f7ff fcbc 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(b_GPIO_Port, b_Pin);
 8000daa:	493d      	ldr	r1, [pc, #244]	; (8000ea0 <show_n+0x2c8>)
 8000dac:	483b      	ldr	r0, [pc, #236]	; (8000e9c <show_n+0x2c4>)
 8000dae:	f7ff fcc7 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(c_GPIO_Port, c_Pin);
 8000db2:	493c      	ldr	r1, [pc, #240]	; (8000ea4 <show_n+0x2cc>)
 8000db4:	4839      	ldr	r0, [pc, #228]	; (8000e9c <show_n+0x2c4>)
 8000db6:	f7ff fcb4 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(d_GPIO_Port, d_Pin);
 8000dba:	493b      	ldr	r1, [pc, #236]	; (8000ea8 <show_n+0x2d0>)
 8000dbc:	4835      	ldr	r0, [pc, #212]	; (8000e94 <show_n+0x2bc>)
 8000dbe:	f7ff fcb0 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(e_GPIO_Port, e_Pin);
 8000dc2:	493a      	ldr	r1, [pc, #232]	; (8000eac <show_n+0x2d4>)
 8000dc4:	4833      	ldr	r0, [pc, #204]	; (8000e94 <show_n+0x2bc>)
 8000dc6:	f7ff fcbb 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(f_GPIO_Port, f_Pin);
 8000dca:	4939      	ldr	r1, [pc, #228]	; (8000eb0 <show_n+0x2d8>)
 8000dcc:	4833      	ldr	r0, [pc, #204]	; (8000e9c <show_n+0x2c4>)
 8000dce:	f7ff fca8 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(g_GPIO_Port, g_Pin);
 8000dd2:	4938      	ldr	r1, [pc, #224]	; (8000eb4 <show_n+0x2dc>)
 8000dd4:	482f      	ldr	r0, [pc, #188]	; (8000e94 <show_n+0x2bc>)
 8000dd6:	f7ff fca4 	bl	8000722 <LL_GPIO_SetOutputPin>
		break;
 8000dda:	e08a      	b.n	8000ef2 <show_n+0x31a>
	case 6:
		LL_GPIO_SetOutputPin(a_GPIO_Port, a_Pin);
 8000ddc:	492c      	ldr	r1, [pc, #176]	; (8000e90 <show_n+0x2b8>)
 8000dde:	482f      	ldr	r0, [pc, #188]	; (8000e9c <show_n+0x2c4>)
 8000de0:	f7ff fc9f 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(b_GPIO_Port, b_Pin);
 8000de4:	492e      	ldr	r1, [pc, #184]	; (8000ea0 <show_n+0x2c8>)
 8000de6:	482d      	ldr	r0, [pc, #180]	; (8000e9c <show_n+0x2c4>)
 8000de8:	f7ff fcaa 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(c_GPIO_Port, c_Pin);
 8000dec:	492d      	ldr	r1, [pc, #180]	; (8000ea4 <show_n+0x2cc>)
 8000dee:	482b      	ldr	r0, [pc, #172]	; (8000e9c <show_n+0x2c4>)
 8000df0:	f7ff fc97 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(d_GPIO_Port, d_Pin);
 8000df4:	492c      	ldr	r1, [pc, #176]	; (8000ea8 <show_n+0x2d0>)
 8000df6:	4827      	ldr	r0, [pc, #156]	; (8000e94 <show_n+0x2bc>)
 8000df8:	f7ff fc93 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(e_GPIO_Port, e_Pin);
 8000dfc:	492b      	ldr	r1, [pc, #172]	; (8000eac <show_n+0x2d4>)
 8000dfe:	4825      	ldr	r0, [pc, #148]	; (8000e94 <show_n+0x2bc>)
 8000e00:	f7ff fc8f 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(f_GPIO_Port, f_Pin);
 8000e04:	492a      	ldr	r1, [pc, #168]	; (8000eb0 <show_n+0x2d8>)
 8000e06:	4825      	ldr	r0, [pc, #148]	; (8000e9c <show_n+0x2c4>)
 8000e08:	f7ff fc8b 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(g_GPIO_Port, g_Pin);
 8000e0c:	4929      	ldr	r1, [pc, #164]	; (8000eb4 <show_n+0x2dc>)
 8000e0e:	4821      	ldr	r0, [pc, #132]	; (8000e94 <show_n+0x2bc>)
 8000e10:	f7ff fc87 	bl	8000722 <LL_GPIO_SetOutputPin>
		break;
 8000e14:	e06d      	b.n	8000ef2 <show_n+0x31a>
	case 7:
		LL_GPIO_SetOutputPin(a_GPIO_Port, a_Pin);
 8000e16:	491e      	ldr	r1, [pc, #120]	; (8000e90 <show_n+0x2b8>)
 8000e18:	4820      	ldr	r0, [pc, #128]	; (8000e9c <show_n+0x2c4>)
 8000e1a:	f7ff fc82 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(b_GPIO_Port, b_Pin);
 8000e1e:	4920      	ldr	r1, [pc, #128]	; (8000ea0 <show_n+0x2c8>)
 8000e20:	481e      	ldr	r0, [pc, #120]	; (8000e9c <show_n+0x2c4>)
 8000e22:	f7ff fc7e 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(c_GPIO_Port, c_Pin);
 8000e26:	491f      	ldr	r1, [pc, #124]	; (8000ea4 <show_n+0x2cc>)
 8000e28:	481c      	ldr	r0, [pc, #112]	; (8000e9c <show_n+0x2c4>)
 8000e2a:	f7ff fc7a 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(d_GPIO_Port, d_Pin);
 8000e2e:	491e      	ldr	r1, [pc, #120]	; (8000ea8 <show_n+0x2d0>)
 8000e30:	4818      	ldr	r0, [pc, #96]	; (8000e94 <show_n+0x2bc>)
 8000e32:	f7ff fc85 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(e_GPIO_Port, e_Pin);
 8000e36:	491d      	ldr	r1, [pc, #116]	; (8000eac <show_n+0x2d4>)
 8000e38:	4816      	ldr	r0, [pc, #88]	; (8000e94 <show_n+0x2bc>)
 8000e3a:	f7ff fc81 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(f_GPIO_Port, f_Pin);
 8000e3e:	491c      	ldr	r1, [pc, #112]	; (8000eb0 <show_n+0x2d8>)
 8000e40:	4816      	ldr	r0, [pc, #88]	; (8000e9c <show_n+0x2c4>)
 8000e42:	f7ff fc7d 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(g_GPIO_Port, g_Pin);
 8000e46:	491b      	ldr	r1, [pc, #108]	; (8000eb4 <show_n+0x2dc>)
 8000e48:	4812      	ldr	r0, [pc, #72]	; (8000e94 <show_n+0x2bc>)
 8000e4a:	f7ff fc79 	bl	8000740 <LL_GPIO_ResetOutputPin>
		break;
 8000e4e:	e050      	b.n	8000ef2 <show_n+0x31a>
	case 8:
		LL_GPIO_SetOutputPin(a_GPIO_Port, a_Pin);
 8000e50:	490f      	ldr	r1, [pc, #60]	; (8000e90 <show_n+0x2b8>)
 8000e52:	4812      	ldr	r0, [pc, #72]	; (8000e9c <show_n+0x2c4>)
 8000e54:	f7ff fc65 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(b_GPIO_Port, b_Pin);
 8000e58:	4911      	ldr	r1, [pc, #68]	; (8000ea0 <show_n+0x2c8>)
 8000e5a:	4810      	ldr	r0, [pc, #64]	; (8000e9c <show_n+0x2c4>)
 8000e5c:	f7ff fc61 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(c_GPIO_Port, c_Pin);
 8000e60:	4910      	ldr	r1, [pc, #64]	; (8000ea4 <show_n+0x2cc>)
 8000e62:	480e      	ldr	r0, [pc, #56]	; (8000e9c <show_n+0x2c4>)
 8000e64:	f7ff fc5d 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(d_GPIO_Port, d_Pin);
 8000e68:	490f      	ldr	r1, [pc, #60]	; (8000ea8 <show_n+0x2d0>)
 8000e6a:	480a      	ldr	r0, [pc, #40]	; (8000e94 <show_n+0x2bc>)
 8000e6c:	f7ff fc59 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(e_GPIO_Port, e_Pin);
 8000e70:	490e      	ldr	r1, [pc, #56]	; (8000eac <show_n+0x2d4>)
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <show_n+0x2bc>)
 8000e74:	f7ff fc55 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(f_GPIO_Port, f_Pin);
 8000e78:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <show_n+0x2d8>)
 8000e7a:	4808      	ldr	r0, [pc, #32]	; (8000e9c <show_n+0x2c4>)
 8000e7c:	f7ff fc51 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(g_GPIO_Port, g_Pin);
 8000e80:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <show_n+0x2dc>)
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <show_n+0x2bc>)
 8000e84:	f7ff fc4d 	bl	8000722 <LL_GPIO_SetOutputPin>
		break;
 8000e88:	e033      	b.n	8000ef2 <show_n+0x31a>
 8000e8a:	bf00      	nop
 8000e8c:	cccccccd 	.word	0xcccccccd
 8000e90:	04100010 	.word	0x04100010
 8000e94:	40010800 	.word	0x40010800
 8000e98:	04080008 	.word	0x04080008
 8000e9c:	40010c00 	.word	0x40010c00
 8000ea0:	04400040 	.word	0x04400040
 8000ea4:	04200020 	.word	0x04200020
 8000ea8:	04010001 	.word	0x04010001
 8000eac:	04020002 	.word	0x04020002
 8000eb0:	04800080 	.word	0x04800080
 8000eb4:	04040004 	.word	0x04040004
	case 9:
		LL_GPIO_SetOutputPin(a_GPIO_Port, a_Pin);
 8000eb8:	4910      	ldr	r1, [pc, #64]	; (8000efc <show_n+0x324>)
 8000eba:	4811      	ldr	r0, [pc, #68]	; (8000f00 <show_n+0x328>)
 8000ebc:	f7ff fc31 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(b_GPIO_Port, b_Pin);
 8000ec0:	4910      	ldr	r1, [pc, #64]	; (8000f04 <show_n+0x32c>)
 8000ec2:	480f      	ldr	r0, [pc, #60]	; (8000f00 <show_n+0x328>)
 8000ec4:	f7ff fc2d 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(c_GPIO_Port, c_Pin);
 8000ec8:	490f      	ldr	r1, [pc, #60]	; (8000f08 <show_n+0x330>)
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <show_n+0x328>)
 8000ecc:	f7ff fc29 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(d_GPIO_Port, d_Pin);
 8000ed0:	490e      	ldr	r1, [pc, #56]	; (8000f0c <show_n+0x334>)
 8000ed2:	480f      	ldr	r0, [pc, #60]	; (8000f10 <show_n+0x338>)
 8000ed4:	f7ff fc25 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(e_GPIO_Port, e_Pin);
 8000ed8:	490e      	ldr	r1, [pc, #56]	; (8000f14 <show_n+0x33c>)
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <show_n+0x338>)
 8000edc:	f7ff fc30 	bl	8000740 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(f_GPIO_Port, f_Pin);
 8000ee0:	490d      	ldr	r1, [pc, #52]	; (8000f18 <show_n+0x340>)
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <show_n+0x328>)
 8000ee4:	f7ff fc1d 	bl	8000722 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(g_GPIO_Port, g_Pin);
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <show_n+0x344>)
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <show_n+0x338>)
 8000eec:	f7ff fc19 	bl	8000722 <LL_GPIO_SetOutputPin>
		break;
 8000ef0:	bf00      	nop
	}

}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	04100010 	.word	0x04100010
 8000f00:	40010c00 	.word	0x40010c00
 8000f04:	04400040 	.word	0x04400040
 8000f08:	04200020 	.word	0x04200020
 8000f0c:	04010001 	.word	0x04010001
 8000f10:	40010800 	.word	0x40010800
 8000f14:	04020002 	.word	0x04020002
 8000f18:	04800080 	.word	0x04800080
 8000f1c:	04040004 	.word	0x04040004

08000f20 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	bf0c      	ite	eq
 8000f36:	2301      	moveq	r3, #1
 8000f38:	2300      	movne	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40010400 	.word	0x40010400

08000f4c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <LL_EXTI_ClearFlag_0_31+0x18>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6153      	str	r3, [r2, #20]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	40010400 	.word	0x40010400

08000f68 <LL_TIM_ClearFlag_UPDATE>:
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f06f 0201 	mvn.w	r2, #1
 8000f76:	611a      	str	r2, [r3, #16]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d101      	bne.n	8000f9a <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000faa:	e7fe      	b.n	8000faa <NMI_Handler+0x4>

08000fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <HardFault_Handler+0x4>

08000fb2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <MemManage_Handler+0x4>

08000fb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <BusFault_Handler+0x4>

08000fbe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <UsageFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8000ff8:	2040      	movs	r0, #64	; 0x40
 8000ffa:	f7ff ff91 	bl	8000f20 <LL_EXTI_IsActiveFlag_0_31>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d01d      	beq.n	8001040 <EXTI9_5_IRQHandler+0x4c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8001004:	2040      	movs	r0, #64	; 0x40
 8001006:	f7ff ffa1 	bl	8000f4c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */
		if(!shot&&cnt>10000&&(G||S)){
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <EXTI9_5_IRQHandler+0x50>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	f083 0301 	eor.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <EXTI9_5_IRQHandler+0x4c>
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <EXTI9_5_IRQHandler+0x54>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001020:	4293      	cmp	r3, r2
 8001022:	d90d      	bls.n	8001040 <EXTI9_5_IRQHandler+0x4c>
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <EXTI9_5_IRQHandler+0x58>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d103      	bne.n	8001034 <EXTI9_5_IRQHandler+0x40>
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <EXTI9_5_IRQHandler+0x5c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <EXTI9_5_IRQHandler+0x4c>
			shot=1;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <EXTI9_5_IRQHandler+0x50>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
			cnt=0;
 800103a:	4b03      	ldr	r3, [pc, #12]	; (8001048 <EXTI9_5_IRQHandler+0x54>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000034 	.word	0x20000034
 8001048:	20000020 	.word	0x20000020
 800104c:	2000002e 	.word	0x2000002e
 8001050:	20000030 	.word	0x20000030

08001054 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1) == 1)
 8001058:	480e      	ldr	r0, [pc, #56]	; (8001094 <TIM1_UP_IRQHandler+0x40>)
 800105a:	f7ff ff92 	bl	8000f82 <LL_TIM_IsActiveFlag_UPDATE>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	d115      	bne.n	8001090 <TIM1_UP_IRQHandler+0x3c>
	{
		/* Clear the update interrupt flag*/
		LL_TIM_ClearFlag_UPDATE(TIM1);
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <TIM1_UP_IRQHandler+0x40>)
 8001066:	f7ff ff7f 	bl	8000f68 <LL_TIM_ClearFlag_UPDATE>
		//GPIOA->ODR = (GPIOA->ODR)|(0b0000000000000100);
		//		GPIOA->ODR = (GPIOA->ODR)&(0b1111111111111011);
		cnt++;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <TIM1_UP_IRQHandler+0x44>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a09      	ldr	r2, [pc, #36]	; (8001098 <TIM1_UP_IRQHandler+0x44>)
 8001072:	6013      	str	r3, [r2, #0]
		Gcnt++;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <TIM1_UP_IRQHandler+0x48>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <TIM1_UP_IRQHandler+0x48>)
 800107c:	6013      	str	r3, [r2, #0]
		if(uscnt>0)
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <TIM1_UP_IRQHandler+0x4c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <TIM1_UP_IRQHandler+0x3c>
			uscnt--;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <TIM1_UP_IRQHandler+0x4c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3b01      	subs	r3, #1
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <TIM1_UP_IRQHandler+0x4c>)
 800108e:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40012c00 	.word	0x40012c00
 8001098:	20000020 	.word	0x20000020
 800109c:	20000024 	.word	0x20000024
 80010a0:	20000028 	.word	0x20000028

080010a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <__NVIC_GetPriorityGrouping>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4906      	ldr	r1, [pc, #24]	; (8001100 <__NVIC_EnableIRQ+0x34>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <LL_APB2_GRP1_EnableClock>:
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011c6:	699a      	ldr	r2, [r3, #24]
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011d2:	699a      	ldr	r2, [r3, #24]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4013      	ands	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000

080011ec <LL_TIM_DisableARRPreload>:
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	601a      	str	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <LL_TIM_SetClockSource>:
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800121c:	f023 0307 	bic.w	r3, r3, #7
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <LL_TIM_SetTriggerOutput>:
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	605a      	str	r2, [r3, #4]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <LL_TIM_DisableMasterSlaveMode>:
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	609a      	str	r2, [r3, #8]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001288:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800128c:	f7ff ff96 	bl	80011bc <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001290:	f7ff ff0e 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 8001294:	4603      	mov	r3, r0
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff5c 	bl	8001158 <NVIC_EncodePriority>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4619      	mov	r1, r3
 80012a4:	2019      	movs	r0, #25
 80012a6:	f7ff ff2d 	bl	8001104 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012aa:	2019      	movs	r0, #25
 80012ac:	f7ff ff0e 	bl	80010cc <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 127;
 80012b0:	237f      	movs	r3, #127	; 0x7f
 80012b2:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 3;
 80012b8:	2303      	movs	r3, #3
 80012ba:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	480a      	ldr	r0, [pc, #40]	; (80012f4 <MX_TIM1_Init+0x80>)
 80012ca:	f000 fa97 	bl	80017fc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80012ce:	4809      	ldr	r0, [pc, #36]	; (80012f4 <MX_TIM1_Init+0x80>)
 80012d0:	f7ff ff8c 	bl	80011ec <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80012d4:	2100      	movs	r1, #0
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM1_Init+0x80>)
 80012d8:	f7ff ff97 	bl	800120a <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80012dc:	2100      	movs	r1, #0
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_TIM1_Init+0x80>)
 80012e0:	f7ff ffa7 	bl	8001232 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM1_Init+0x80>)
 80012e6:	f7ff ffb6 	bl	8001256 <LL_TIM_DisableMasterSlaveMode>

}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40012c00 	.word	0x40012c00

080012f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012fa:	e003      	b.n	8001304 <LoopCopyDataInit>

080012fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001300:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001302:	3104      	adds	r1, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001308:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800130a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800130c:	d3f6      	bcc.n	80012fc <CopyDataInit>
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001310:	e002      	b.n	8001318 <LoopFillZerobss>

08001312 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001314:	f842 3b04 	str.w	r3, [r2], #4

08001318 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800131a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800131c:	d3f9      	bcc.n	8001312 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800131e:	f7ff fec1 	bl	80010a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001322:	f000 fb23 	bl	800196c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001326:	f7ff fa2f 	bl	8000788 <main>
  bx lr
 800132a:	4770      	bx	lr
  ldr r3, =_sidata
 800132c:	080019d4 	.word	0x080019d4
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001334:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001338:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 800133c:	20000038 	.word	0x20000038

08001340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC1_2_IRQHandler>
	...

08001344 <LL_EXTI_EnableIT_0_31>:
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <LL_EXTI_EnableIT_0_31+0x20>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4904      	ldr	r1, [pc, #16]	; (8001364 <LL_EXTI_EnableIT_0_31+0x20>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40010400 	.word	0x40010400

08001368 <LL_EXTI_DisableIT_0_31>:
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <LL_EXTI_DisableIT_0_31+0x20>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	43db      	mvns	r3, r3
 8001378:	4903      	ldr	r1, [pc, #12]	; (8001388 <LL_EXTI_DisableIT_0_31+0x20>)
 800137a:	4013      	ands	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40010400 	.word	0x40010400

0800138c <LL_EXTI_EnableEvent_0_31>:
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <LL_EXTI_EnableEvent_0_31+0x20>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4904      	ldr	r1, [pc, #16]	; (80013ac <LL_EXTI_EnableEvent_0_31+0x20>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40010400 	.word	0x40010400

080013b0 <LL_EXTI_DisableEvent_0_31>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <LL_EXTI_DisableEvent_0_31+0x20>)
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	43db      	mvns	r3, r3
 80013c0:	4903      	ldr	r1, [pc, #12]	; (80013d0 <LL_EXTI_DisableEvent_0_31+0x20>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	40010400 	.word	0x40010400

080013d4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	4904      	ldr	r1, [pc, #16]	; (80013f4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40010400 	.word	0x40010400

080013f8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	43db      	mvns	r3, r3
 8001408:	4903      	ldr	r1, [pc, #12]	; (8001418 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800140a:	4013      	ands	r3, r2
 800140c:	608b      	str	r3, [r1, #8]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40010400 	.word	0x40010400

0800141c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	4904      	ldr	r1, [pc, #16]	; (800143c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40010400 	.word	0x40010400

08001440 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	43db      	mvns	r3, r3
 8001450:	4903      	ldr	r1, [pc, #12]	; (8001460 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001452:	4013      	ands	r3, r2
 8001454:	60cb      	str	r3, [r1, #12]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40010400 	.word	0x40010400

08001464 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d060      	beq.n	800153a <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d067      	beq.n	8001550 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	795b      	ldrb	r3, [r3, #5]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d00e      	beq.n	80014a6 <LL_EXTI_Init+0x42>
 8001488:	2b02      	cmp	r3, #2
 800148a:	d017      	beq.n	80014bc <LL_EXTI_Init+0x58>
 800148c:	2b00      	cmp	r3, #0
 800148e:	d120      	bne.n	80014d2 <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff8b 	bl	80013b0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff50 	bl	8001344 <LL_EXTI_EnableIT_0_31>
          break;
 80014a4:	e018      	b.n	80014d8 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff5c 	bl	8001368 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff69 	bl	800138c <LL_EXTI_EnableEvent_0_31>
          break;
 80014ba:	e00d      	b.n	80014d8 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff3f 	bl	8001344 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff5e 	bl	800138c <LL_EXTI_EnableEvent_0_31>
          break;
 80014d0:	e002      	b.n	80014d8 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
          break;
 80014d6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	799b      	ldrb	r3, [r3, #6]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d037      	beq.n	8001550 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	799b      	ldrb	r3, [r3, #6]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d00e      	beq.n	8001506 <LL_EXTI_Init+0xa2>
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d017      	beq.n	800151c <LL_EXTI_Init+0xb8>
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d120      	bne.n	8001532 <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ffa3 	bl	8001440 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff68 	bl	80013d4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001504:	e025      	b.n	8001552 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff74 	bl	80013f8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff81 	bl	800141c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800151a:	e01a      	b.n	8001552 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff57 	bl	80013d4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff76 	bl	800141c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001530:	e00f      	b.n	8001552 <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
            break;
 8001536:	bf00      	nop
 8001538:	e00b      	b.n	8001552 <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff12 	bl	8001368 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff31 	bl	80013b0 <LL_EXTI_DisableEvent_0_31>
 800154e:	e000      	b.n	8001552 <LL_EXTI_Init+0xee>
      }
 8001550:	bf00      	nop
  }
  return status;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <LL_GPIO_SetPinMode>:
{
 800155c:	b490      	push	{r4, r7}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	461a      	mov	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	0e1b      	lsrs	r3, r3, #24
 8001570:	4413      	add	r3, r2
 8001572:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001574:	6822      	ldr	r2, [r4, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	613b      	str	r3, [r7, #16]
  return result;
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	fab3 f383 	clz	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	210f      	movs	r1, #15
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	401a      	ands	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	61bb      	str	r3, [r7, #24]
  return result;
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	6023      	str	r3, [r4, #0]
}
 80015b6:	bf00      	nop
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc90      	pop	{r4, r7}
 80015be:	4770      	bx	lr

080015c0 <LL_GPIO_SetPinSpeed>:
{
 80015c0:	b490      	push	{r4, r7}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	0e1b      	lsrs	r3, r3, #24
 80015d4:	4413      	add	r3, r2
 80015d6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80015d8:	6822      	ldr	r2, [r4, #0]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	fa93 f3a3 	rbit	r3, r3
 80015e4:	613b      	str	r3, [r7, #16]
  return result;
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	2103      	movs	r1, #3
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	401a      	ands	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	61bb      	str	r3, [r7, #24]
  return result;
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	fab3 f383 	clz	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	6023      	str	r3, [r4, #0]
}
 800161a:	bf00      	nop
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bc90      	pop	{r4, r7}
 8001622:	4770      	bx	lr

08001624 <LL_GPIO_SetPinOutputType>:
{
 8001624:	b490      	push	{r4, r7}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	461a      	mov	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	0e1b      	lsrs	r3, r3, #24
 8001638:	4413      	add	r3, r2
 800163a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800163c:	6822      	ldr	r2, [r4, #0]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa93 f3a3 	rbit	r3, r3
 8001648:	613b      	str	r3, [r7, #16]
  return result;
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	2104      	movs	r1, #4
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	401a      	ands	r2, r3
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	61bb      	str	r3, [r7, #24]
  return result;
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	6023      	str	r3, [r4, #0]
}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bc90      	pop	{r4, r7}
 8001686:	4770      	bx	lr

08001688 <LL_GPIO_SetPinPull>:
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	0a1b      	lsrs	r3, r3, #8
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	613b      	str	r3, [r7, #16]
  return result;
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	408b      	lsls	r3, r1
 80016bc:	431a      	orrs	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	60da      	str	r2, [r3, #12]
}
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	0c1b      	lsrs	r3, r3, #16
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	60fb      	str	r3, [r7, #12]
  return result;
 80016ec:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80016f6:	e040      	b.n	800177a <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80016f8:	2201      	movs	r2, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	409a      	lsls	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	4013      	ands	r3, r2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d036      	beq.n	8001774 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	2b07      	cmp	r3, #7
 800170a:	d806      	bhi.n	800171a <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800170c:	f240 1201 	movw	r2, #257	; 0x101
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	e008      	b.n	800172c <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b08      	subs	r3, #8
 800171e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800172a:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	461a      	mov	r2, r3
 8001732:	69b9      	ldr	r1, [r7, #24]
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ffa7 	bl	8001688 <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	461a      	mov	r2, r3
 8001740:	69b9      	ldr	r1, [r7, #24]
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff0a 	bl	800155c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d003      	beq.n	8001758 <LL_GPIO_Init+0x8c>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b09      	cmp	r3, #9
 8001756:	d10d      	bne.n	8001774 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	461a      	mov	r2, r3
 800175e:	69b9      	ldr	r1, [r7, #24]
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff2d 	bl	80015c0 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	461a      	mov	r2, r3
 800176c:	69b9      	ldr	r1, [r7, #24]
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ff58 	bl	8001624 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	3301      	adds	r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	fa22 f303 	lsr.w	r3, r2, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1b8      	bne.n	80016f8 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <LL_TIM_SetPrescaler>:
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <LL_TIM_SetAutoReload>:
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <LL_TIM_SetRepetitionCounter>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	615a      	str	r2, [r3, #20]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a27      	ldr	r2, [pc, #156]	; (80018ac <LL_TIM_Init+0xb0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00b      	beq.n	800182c <LL_TIM_Init+0x30>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181a:	d007      	beq.n	800182c <LL_TIM_Init+0x30>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a24      	ldr	r2, [pc, #144]	; (80018b0 <LL_TIM_Init+0xb4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d003      	beq.n	800182c <LL_TIM_Init+0x30>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a23      	ldr	r2, [pc, #140]	; (80018b4 <LL_TIM_Init+0xb8>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d106      	bne.n	800183a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <LL_TIM_Init+0xb0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00b      	beq.n	800185a <LL_TIM_Init+0x5e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d007      	beq.n	800185a <LL_TIM_Init+0x5e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <LL_TIM_Init+0xb4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d003      	beq.n	800185a <LL_TIM_Init+0x5e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <LL_TIM_Init+0xb8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d106      	bne.n	8001868 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4619      	mov	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff98 	bl	80017aa <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff85 	bl	8001790 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <LL_TIM_Init+0xb0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d105      	bne.n	800189a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	4619      	mov	r1, r3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff95 	bl	80017c4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ff9f 	bl	80017de <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40012c00 	.word	0x40012c00
 80018b0:	40000400 	.word	0x40000400
 80018b4:	40000800 	.word	0x40000800

080018b8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <LL_InitTick+0x30>)
 80018cc:	3b01      	subs	r3, #1
 80018ce:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <LL_InitTick+0x30>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <LL_InitTick+0x30>)
 80018d8:	2205      	movs	r2, #5
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80018f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ffdd 	bl	80018b8 <LL_InitTick>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <LL_mDelay+0x44>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001916:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	d00c      	beq.n	800193a <LL_mDelay+0x32>
  {
    Delay++;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3301      	adds	r3, #1
 8001924:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001926:	e008      	b.n	800193a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <LL_mDelay+0x44>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <LL_mDelay+0x32>
    {
      Delay--;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	607b      	str	r3, [r7, #4]
  while (Delay)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f3      	bne.n	8001928 <LL_mDelay+0x20>
    }
  }
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001958:	4a03      	ldr	r2, [pc, #12]	; (8001968 <LL_SetSystemCoreClock+0x18>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	20000000 	.word	0x20000000

0800196c <__libc_init_array>:
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	2500      	movs	r5, #0
 8001970:	4e0c      	ldr	r6, [pc, #48]	; (80019a4 <__libc_init_array+0x38>)
 8001972:	4c0d      	ldr	r4, [pc, #52]	; (80019a8 <__libc_init_array+0x3c>)
 8001974:	1ba4      	subs	r4, r4, r6
 8001976:	10a4      	asrs	r4, r4, #2
 8001978:	42a5      	cmp	r5, r4
 800197a:	d109      	bne.n	8001990 <__libc_init_array+0x24>
 800197c:	f000 f81a 	bl	80019b4 <_init>
 8001980:	2500      	movs	r5, #0
 8001982:	4e0a      	ldr	r6, [pc, #40]	; (80019ac <__libc_init_array+0x40>)
 8001984:	4c0a      	ldr	r4, [pc, #40]	; (80019b0 <__libc_init_array+0x44>)
 8001986:	1ba4      	subs	r4, r4, r6
 8001988:	10a4      	asrs	r4, r4, #2
 800198a:	42a5      	cmp	r5, r4
 800198c:	d105      	bne.n	800199a <__libc_init_array+0x2e>
 800198e:	bd70      	pop	{r4, r5, r6, pc}
 8001990:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001994:	4798      	blx	r3
 8001996:	3501      	adds	r5, #1
 8001998:	e7ee      	b.n	8001978 <__libc_init_array+0xc>
 800199a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800199e:	4798      	blx	r3
 80019a0:	3501      	adds	r5, #1
 80019a2:	e7f2      	b.n	800198a <__libc_init_array+0x1e>
 80019a4:	080019cc 	.word	0x080019cc
 80019a8:	080019cc 	.word	0x080019cc
 80019ac:	080019cc 	.word	0x080019cc
 80019b0:	080019d0 	.word	0x080019d0

080019b4 <_init>:
 80019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b6:	bf00      	nop
 80019b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ba:	bc08      	pop	{r3}
 80019bc:	469e      	mov	lr, r3
 80019be:	4770      	bx	lr

080019c0 <_fini>:
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	bf00      	nop
 80019c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c6:	bc08      	pop	{r3}
 80019c8:	469e      	mov	lr, r3
 80019ca:	4770      	bx	lr
